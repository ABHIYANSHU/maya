// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cstor.proto

/*
Package OpenEBS is a generated protocol buffer package.

It is generated from these files:
	cstor.proto

It has these top-level messages:
	CmdOutput
	Request
	ZfsArgs
	ZpoolArgs
*/
package OpenEBS

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Cmd int32

const (
	Cmd_POOL     Cmd = 0
	Cmd_VOLUME   Cmd = 1
	Cmd_SNAPSHOT Cmd = 2
)

var Cmd_name = map[int32]string{
	0: "POOL",
	1: "VOLUME",
	2: "SNAPSHOT",
}
var Cmd_value = map[string]int32{
	"POOL":     0,
	"VOLUME":   1,
	"SNAPSHOT": 2,
}

func (x Cmd) String() string {
	return proto.EnumName(Cmd_name, int32(x))
}
func (Cmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ZfsSubCmd int32

const (
	ZfsSubCmd_ZFS_LIST     ZfsSubCmd = 0
	ZfsSubCmd_ZFS_CREATE   ZfsSubCmd = 1
	ZfsSubCmd_ZFS_DESTROY  ZfsSubCmd = 2
	ZfsSubCmd_ZFS_SNAPSHOT ZfsSubCmd = 3
	ZfsSubCmd_ZFS_ROLLBACK ZfsSubCmd = 4
)

var ZfsSubCmd_name = map[int32]string{
	0: "ZFS_LIST",
	1: "ZFS_CREATE",
	2: "ZFS_DESTROY",
	3: "ZFS_SNAPSHOT",
	4: "ZFS_ROLLBACK",
}
var ZfsSubCmd_value = map[string]int32{
	"ZFS_LIST":     0,
	"ZFS_CREATE":   1,
	"ZFS_DESTROY":  2,
	"ZFS_SNAPSHOT": 3,
	"ZFS_ROLLBACK": 4,
}

func (x ZfsSubCmd) String() string {
	return proto.EnumName(ZfsSubCmd_name, int32(x))
}
func (ZfsSubCmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ZpoolSubCmd int32

const (
	ZpoolSubCmd_ZPOOL_CREATE     ZpoolSubCmd = 0
	ZpoolSubCmd_ZPOOL_DESTROY    ZpoolSubCmd = 1
	ZpoolSubCmd_ZPOOL_ADD        ZpoolSubCmd = 2
	ZpoolSubCmd_ZPOOL_REMOVE     ZpoolSubCmd = 3
	ZpoolSubCmd_ZPOOL_LABELCLEAR ZpoolSubCmd = 4
	ZpoolSubCmd_ZPOOL_LIST       ZpoolSubCmd = 5
	ZpoolSubCmd_ZPOOL_IOSTAT     ZpoolSubCmd = 6
	ZpoolSubCmd_ZPOOL_STATUS     ZpoolSubCmd = 7
	ZpoolSubCmd_ZPOOL_ONLINE     ZpoolSubCmd = 8
	ZpoolSubCmd_ZPOOL_OFFLINE    ZpoolSubCmd = 9
	ZpoolSubCmd_ZPOOL_CLEAR      ZpoolSubCmd = 10
)

var ZpoolSubCmd_name = map[int32]string{
	0:  "ZPOOL_CREATE",
	1:  "ZPOOL_DESTROY",
	2:  "ZPOOL_ADD",
	3:  "ZPOOL_REMOVE",
	4:  "ZPOOL_LABELCLEAR",
	5:  "ZPOOL_LIST",
	6:  "ZPOOL_IOSTAT",
	7:  "ZPOOL_STATUS",
	8:  "ZPOOL_ONLINE",
	9:  "ZPOOL_OFFLINE",
	10: "ZPOOL_CLEAR",
}
var ZpoolSubCmd_value = map[string]int32{
	"ZPOOL_CREATE":     0,
	"ZPOOL_DESTROY":    1,
	"ZPOOL_ADD":        2,
	"ZPOOL_REMOVE":     3,
	"ZPOOL_LABELCLEAR": 4,
	"ZPOOL_LIST":       5,
	"ZPOOL_IOSTAT":     6,
	"ZPOOL_STATUS":     7,
	"ZPOOL_ONLINE":     8,
	"ZPOOL_OFFLINE":    9,
	"ZPOOL_CLEAR":      10,
}

func (x ZpoolSubCmd) String() string {
	return proto.EnumName(ZpoolSubCmd_name, int32(x))
}
func (ZpoolSubCmd) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type CmdOutput struct {
	Output string `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
}

func (m *CmdOutput) Reset()                    { *m = CmdOutput{} }
func (m *CmdOutput) String() string            { return proto.CompactTextString(m) }
func (*CmdOutput) ProtoMessage()               {}
func (*CmdOutput) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CmdOutput) GetOutput() string {
	if m != nil {
		return m.Output
	}
	return ""
}

type Request struct {
	Cmd          Cmd    `protobuf:"varint,1,opt,name=cmd,enum=OpenEBS.Cmd" json:"cmd,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Pool         string `protobuf:"bytes,3,opt,name=Pool" json:"Pool,omitempty"`
	Volume       string `protobuf:"bytes,4,opt,name=Volume" json:"Volume,omitempty"`
	RemoteCstor  string `protobuf:"bytes,5,opt,name=RemoteCstor" json:"RemoteCstor,omitempty"`
	RemoteUser   string `protobuf:"bytes,6,opt,name=RemoteUser" json:"RemoteUser,omitempty"`
	RemotePass   string `protobuf:"bytes,7,opt,name=RemotePass" json:"RemotePass,omitempty"`
	RemoteVolume string `protobuf:"bytes,8,opt,name=RemoteVolume" json:"RemoteVolume,omitempty"`
	RemotePool   string `protobuf:"bytes,9,opt,name=RemotePool" json:"RemotePool,omitempty"`
	Interval     string `protobuf:"bytes,10,opt,name=Interval" json:"Interval,omitempty"`
	// Types that are valid to be assigned to SubcmdType:
	//	*Request_Zfssubcmd
	//	*Request_Zpoolsubcmd
	SubcmdType isRequest_SubcmdType `protobuf_oneof:"subcmdType"`
	// Types that are valid to be assigned to ArgsType:
	//	*Request_Zfsargs
	//	*Request_Zpoolargs
	ArgsType isRequest_ArgsType `protobuf_oneof:"argsType"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isRequest_SubcmdType interface {
	isRequest_SubcmdType()
}
type isRequest_ArgsType interface {
	isRequest_ArgsType()
}

type Request_Zfssubcmd struct {
	Zfssubcmd ZfsSubCmd `protobuf:"varint,11,opt,name=zfssubcmd,enum=OpenEBS.ZfsSubCmd,oneof"`
}
type Request_Zpoolsubcmd struct {
	Zpoolsubcmd ZpoolSubCmd `protobuf:"varint,12,opt,name=zpoolsubcmd,enum=OpenEBS.ZpoolSubCmd,oneof"`
}
type Request_Zfsargs struct {
	Zfsargs *ZfsArgs `protobuf:"bytes,13,opt,name=zfsargs,oneof"`
}
type Request_Zpoolargs struct {
	Zpoolargs *ZpoolArgs `protobuf:"bytes,14,opt,name=zpoolargs,oneof"`
}

func (*Request_Zfssubcmd) isRequest_SubcmdType()   {}
func (*Request_Zpoolsubcmd) isRequest_SubcmdType() {}
func (*Request_Zfsargs) isRequest_ArgsType()       {}
func (*Request_Zpoolargs) isRequest_ArgsType()     {}

func (m *Request) GetSubcmdType() isRequest_SubcmdType {
	if m != nil {
		return m.SubcmdType
	}
	return nil
}
func (m *Request) GetArgsType() isRequest_ArgsType {
	if m != nil {
		return m.ArgsType
	}
	return nil
}

func (m *Request) GetCmd() Cmd {
	if m != nil {
		return m.Cmd
	}
	return Cmd_POOL
}

func (m *Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Request) GetPool() string {
	if m != nil {
		return m.Pool
	}
	return ""
}

func (m *Request) GetVolume() string {
	if m != nil {
		return m.Volume
	}
	return ""
}

func (m *Request) GetRemoteCstor() string {
	if m != nil {
		return m.RemoteCstor
	}
	return ""
}

func (m *Request) GetRemoteUser() string {
	if m != nil {
		return m.RemoteUser
	}
	return ""
}

func (m *Request) GetRemotePass() string {
	if m != nil {
		return m.RemotePass
	}
	return ""
}

func (m *Request) GetRemoteVolume() string {
	if m != nil {
		return m.RemoteVolume
	}
	return ""
}

func (m *Request) GetRemotePool() string {
	if m != nil {
		return m.RemotePool
	}
	return ""
}

func (m *Request) GetInterval() string {
	if m != nil {
		return m.Interval
	}
	return ""
}

func (m *Request) GetZfssubcmd() ZfsSubCmd {
	if x, ok := m.GetSubcmdType().(*Request_Zfssubcmd); ok {
		return x.Zfssubcmd
	}
	return ZfsSubCmd_ZFS_LIST
}

func (m *Request) GetZpoolsubcmd() ZpoolSubCmd {
	if x, ok := m.GetSubcmdType().(*Request_Zpoolsubcmd); ok {
		return x.Zpoolsubcmd
	}
	return ZpoolSubCmd_ZPOOL_CREATE
}

func (m *Request) GetZfsargs() *ZfsArgs {
	if x, ok := m.GetArgsType().(*Request_Zfsargs); ok {
		return x.Zfsargs
	}
	return nil
}

func (m *Request) GetZpoolargs() *ZpoolArgs {
	if x, ok := m.GetArgsType().(*Request_Zpoolargs); ok {
		return x.Zpoolargs
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Request) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Request_OneofMarshaler, _Request_OneofUnmarshaler, _Request_OneofSizer, []interface{}{
		(*Request_Zfssubcmd)(nil),
		(*Request_Zpoolsubcmd)(nil),
		(*Request_Zfsargs)(nil),
		(*Request_Zpoolargs)(nil),
	}
}

func _Request_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Request)
	// subcmdType
	switch x := m.SubcmdType.(type) {
	case *Request_Zfssubcmd:
		b.EncodeVarint(11<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Zfssubcmd))
	case *Request_Zpoolsubcmd:
		b.EncodeVarint(12<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Zpoolsubcmd))
	case nil:
	default:
		return fmt.Errorf("Request.SubcmdType has unexpected type %T", x)
	}
	// argsType
	switch x := m.ArgsType.(type) {
	case *Request_Zfsargs:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Zfsargs); err != nil {
			return err
		}
	case *Request_Zpoolargs:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Zpoolargs); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Request.ArgsType has unexpected type %T", x)
	}
	return nil
}

func _Request_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Request)
	switch tag {
	case 11: // subcmdType.zfssubcmd
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SubcmdType = &Request_Zfssubcmd{ZfsSubCmd(x)}
		return true, err
	case 12: // subcmdType.zpoolsubcmd
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.SubcmdType = &Request_Zpoolsubcmd{ZpoolSubCmd(x)}
		return true, err
	case 13: // argsType.zfsargs
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZfsArgs)
		err := b.DecodeMessage(msg)
		m.ArgsType = &Request_Zfsargs{msg}
		return true, err
	case 14: // argsType.zpoolargs
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ZpoolArgs)
		err := b.DecodeMessage(msg)
		m.ArgsType = &Request_Zpoolargs{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Request_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Request)
	// subcmdType
	switch x := m.SubcmdType.(type) {
	case *Request_Zfssubcmd:
		n += proto.SizeVarint(11<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Zfssubcmd))
	case *Request_Zpoolsubcmd:
		n += proto.SizeVarint(12<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Zpoolsubcmd))
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// argsType
	switch x := m.ArgsType.(type) {
	case *Request_Zfsargs:
		s := proto.Size(x.Zfsargs)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Request_Zpoolargs:
		s := proto.Size(x.Zpoolargs)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type ZfsArgs struct {
	Compression  string `protobuf:"bytes,1,opt,name=compression" json:"compression,omitempty"`
	Logbias      string `protobuf:"bytes,2,opt,name=logbias" json:"logbias,omitempty"`
	Copies       string `protobuf:"bytes,3,opt,name=copies" json:"copies,omitempty"`
	Sync         string `protobuf:"bytes,4,opt,name=sync" json:"sync,omitempty"`
	Readonly     string `protobuf:"bytes,5,opt,name=readonly" json:"readonly,omitempty"`
	Size         string `protobuf:"bytes,6,opt,name=size" json:"size,omitempty"`
	Parent       string `protobuf:"bytes,7,opt,name=parent" json:"parent,omitempty"`
	Name         string `protobuf:"bytes,8,opt,name=name" json:"name,omitempty"`
	Volblocksize string `protobuf:"bytes,9,opt,name=volblocksize" json:"volblocksize,omitempty"`
}

func (m *ZfsArgs) Reset()                    { *m = ZfsArgs{} }
func (m *ZfsArgs) String() string            { return proto.CompactTextString(m) }
func (*ZfsArgs) ProtoMessage()               {}
func (*ZfsArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ZfsArgs) GetCompression() string {
	if m != nil {
		return m.Compression
	}
	return ""
}

func (m *ZfsArgs) GetLogbias() string {
	if m != nil {
		return m.Logbias
	}
	return ""
}

func (m *ZfsArgs) GetCopies() string {
	if m != nil {
		return m.Copies
	}
	return ""
}

func (m *ZfsArgs) GetSync() string {
	if m != nil {
		return m.Sync
	}
	return ""
}

func (m *ZfsArgs) GetReadonly() string {
	if m != nil {
		return m.Readonly
	}
	return ""
}

func (m *ZfsArgs) GetSize() string {
	if m != nil {
		return m.Size
	}
	return ""
}

func (m *ZfsArgs) GetParent() string {
	if m != nil {
		return m.Parent
	}
	return ""
}

func (m *ZfsArgs) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ZfsArgs) GetVolblocksize() string {
	if m != nil {
		return m.Volblocksize
	}
	return ""
}

type ZpoolArgs struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Cachefile string `protobuf:"bytes,2,opt,name=cachefile" json:"cachefile,omitempty"`
	PoolType  string `protobuf:"bytes,3,opt,name=poolType" json:"poolType,omitempty"`
	Diskpaths string `protobuf:"bytes,4,opt,name=diskpaths" json:"diskpaths,omitempty"`
}

func (m *ZpoolArgs) Reset()                    { *m = ZpoolArgs{} }
func (m *ZpoolArgs) String() string            { return proto.CompactTextString(m) }
func (*ZpoolArgs) ProtoMessage()               {}
func (*ZpoolArgs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ZpoolArgs) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ZpoolArgs) GetCachefile() string {
	if m != nil {
		return m.Cachefile
	}
	return ""
}

func (m *ZpoolArgs) GetPoolType() string {
	if m != nil {
		return m.PoolType
	}
	return ""
}

func (m *ZpoolArgs) GetDiskpaths() string {
	if m != nil {
		return m.Diskpaths
	}
	return ""
}

func init() {
	proto.RegisterType((*CmdOutput)(nil), "OpenEBS.CmdOutput")
	proto.RegisterType((*Request)(nil), "OpenEBS.Request")
	proto.RegisterType((*ZfsArgs)(nil), "OpenEBS.ZfsArgs")
	proto.RegisterType((*ZpoolArgs)(nil), "OpenEBS.ZpoolArgs")
	proto.RegisterEnum("OpenEBS.Cmd", Cmd_name, Cmd_value)
	proto.RegisterEnum("OpenEBS.ZfsSubCmd", ZfsSubCmd_name, ZfsSubCmd_value)
	proto.RegisterEnum("OpenEBS.ZpoolSubCmd", ZpoolSubCmd_name, ZpoolSubCmd_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Cstor service

type CstorClient interface {
	ExecuteCmd(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error)
	List(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error)
	Create(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error)
	Destroy(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error)
	Rollback(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error)
	Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error)
	Set(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error)
	Dump(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error)
	Stats(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error)
	IOStats(ctx context.Context, in *Request, opts ...grpc.CallOption) (Cstor_IOStatsClient, error)
	Send(ctx context.Context, in *Request, opts ...grpc.CallOption) (Cstor_SendClient, error)
}

type cstorClient struct {
	cc *grpc.ClientConn
}

func NewCstorClient(cc *grpc.ClientConn) CstorClient {
	return &cstorClient{cc}
}

func (c *cstorClient) ExecuteCmd(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error) {
	out := new(CmdOutput)
	err := grpc.Invoke(ctx, "/OpenEBS.Cstor/ExecuteCmd", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cstorClient) List(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error) {
	out := new(CmdOutput)
	err := grpc.Invoke(ctx, "/OpenEBS.Cstor/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cstorClient) Create(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error) {
	out := new(CmdOutput)
	err := grpc.Invoke(ctx, "/OpenEBS.Cstor/Create", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cstorClient) Destroy(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error) {
	out := new(CmdOutput)
	err := grpc.Invoke(ctx, "/OpenEBS.Cstor/Destroy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cstorClient) Rollback(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error) {
	out := new(CmdOutput)
	err := grpc.Invoke(ctx, "/OpenEBS.Cstor/Rollback", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cstorClient) Get(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error) {
	out := new(CmdOutput)
	err := grpc.Invoke(ctx, "/OpenEBS.Cstor/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cstorClient) Set(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error) {
	out := new(CmdOutput)
	err := grpc.Invoke(ctx, "/OpenEBS.Cstor/Set", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cstorClient) Dump(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error) {
	out := new(CmdOutput)
	err := grpc.Invoke(ctx, "/OpenEBS.Cstor/Dump", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cstorClient) Stats(ctx context.Context, in *Request, opts ...grpc.CallOption) (*CmdOutput, error) {
	out := new(CmdOutput)
	err := grpc.Invoke(ctx, "/OpenEBS.Cstor/Stats", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cstorClient) IOStats(ctx context.Context, in *Request, opts ...grpc.CallOption) (Cstor_IOStatsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Cstor_serviceDesc.Streams[0], c.cc, "/OpenEBS.Cstor/IOStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &cstorIOStatsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cstor_IOStatsClient interface {
	Recv() (*CmdOutput, error)
	grpc.ClientStream
}

type cstorIOStatsClient struct {
	grpc.ClientStream
}

func (x *cstorIOStatsClient) Recv() (*CmdOutput, error) {
	m := new(CmdOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cstorClient) Send(ctx context.Context, in *Request, opts ...grpc.CallOption) (Cstor_SendClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Cstor_serviceDesc.Streams[1], c.cc, "/OpenEBS.Cstor/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &cstorSendClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Cstor_SendClient interface {
	Recv() (*CmdOutput, error)
	grpc.ClientStream
}

type cstorSendClient struct {
	grpc.ClientStream
}

func (x *cstorSendClient) Recv() (*CmdOutput, error) {
	m := new(CmdOutput)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Cstor service

type CstorServer interface {
	ExecuteCmd(context.Context, *Request) (*CmdOutput, error)
	List(context.Context, *Request) (*CmdOutput, error)
	Create(context.Context, *Request) (*CmdOutput, error)
	Destroy(context.Context, *Request) (*CmdOutput, error)
	Rollback(context.Context, *Request) (*CmdOutput, error)
	Get(context.Context, *Request) (*CmdOutput, error)
	Set(context.Context, *Request) (*CmdOutput, error)
	Dump(context.Context, *Request) (*CmdOutput, error)
	Stats(context.Context, *Request) (*CmdOutput, error)
	IOStats(*Request, Cstor_IOStatsServer) error
	Send(*Request, Cstor_SendServer) error
}

func RegisterCstorServer(s *grpc.Server, srv CstorServer) {
	s.RegisterService(&_Cstor_serviceDesc, srv)
}

func _Cstor_ExecuteCmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CstorServer).ExecuteCmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenEBS.Cstor/ExecuteCmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CstorServer).ExecuteCmd(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cstor_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CstorServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenEBS.Cstor/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CstorServer).List(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cstor_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CstorServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenEBS.Cstor/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CstorServer).Create(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cstor_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CstorServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenEBS.Cstor/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CstorServer).Destroy(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cstor_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CstorServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenEBS.Cstor/Rollback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CstorServer).Rollback(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cstor_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CstorServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenEBS.Cstor/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CstorServer).Get(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cstor_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CstorServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenEBS.Cstor/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CstorServer).Set(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cstor_Dump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CstorServer).Dump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenEBS.Cstor/Dump",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CstorServer).Dump(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cstor_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CstorServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/OpenEBS.Cstor/Stats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CstorServer).Stats(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cstor_IOStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CstorServer).IOStats(m, &cstorIOStatsServer{stream})
}

type Cstor_IOStatsServer interface {
	Send(*CmdOutput) error
	grpc.ServerStream
}

type cstorIOStatsServer struct {
	grpc.ServerStream
}

func (x *cstorIOStatsServer) Send(m *CmdOutput) error {
	return x.ServerStream.SendMsg(m)
}

func _Cstor_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CstorServer).Send(m, &cstorSendServer{stream})
}

type Cstor_SendServer interface {
	Send(*CmdOutput) error
	grpc.ServerStream
}

type cstorSendServer struct {
	grpc.ServerStream
}

func (x *cstorSendServer) Send(m *CmdOutput) error {
	return x.ServerStream.SendMsg(m)
}

var _Cstor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "OpenEBS.Cstor",
	HandlerType: (*CstorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExecuteCmd",
			Handler:    _Cstor_ExecuteCmd_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Cstor_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _Cstor_Create_Handler,
		},
		{
			MethodName: "Destroy",
			Handler:    _Cstor_Destroy_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _Cstor_Rollback_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Cstor_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _Cstor_Set_Handler,
		},
		{
			MethodName: "Dump",
			Handler:    _Cstor_Dump_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _Cstor_Stats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "IOStats",
			Handler:       _Cstor_IOStats_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Send",
			Handler:       _Cstor_Send_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cstor.proto",
}

func init() { proto.RegisterFile("cstor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 795 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x55, 0xd1, 0x6e, 0xa3, 0x46,
	0x14, 0x35, 0x31, 0x31, 0xe6, 0xda, 0x49, 0xe9, 0x68, 0x55, 0xa1, 0x55, 0xb5, 0x8a, 0xdc, 0x97,
	0x6d, 0xd4, 0xba, 0xa9, 0xb7, 0x0f, 0x7d, 0xb5, 0x31, 0x69, 0xac, 0xb2, 0x21, 0x02, 0x27, 0x52,
	0xf7, 0xa1, 0x15, 0x86, 0x49, 0xd6, 0x0a, 0x30, 0x94, 0x19, 0xb6, 0x4d, 0xfe, 0xa3, 0x7f, 0xd1,
	0xbf, 0xe9, 0x97, 0xf4, 0x0f, 0x56, 0x77, 0x18, 0x03, 0x7e, 0x73, 0xde, 0xee, 0x39, 0xf7, 0x9c,
	0x7b, 0xef, 0x0c, 0xd7, 0x63, 0x18, 0xc5, 0x5c, 0xb0, 0x72, 0x5a, 0x94, 0x4c, 0x30, 0x62, 0xf8,
	0x05, 0xcd, 0xdd, 0x45, 0x38, 0xf9, 0x06, 0x4c, 0x27, 0x4b, 0xfc, 0x4a, 0x14, 0x95, 0x20, 0x5f,
	0xc1, 0x80, 0xc9, 0xc8, 0xd6, 0xce, 0xb4, 0xb7, 0x66, 0xa0, 0xd0, 0xe4, 0x1f, 0x1d, 0x8c, 0x80,
	0xfe, 0x59, 0x51, 0x2e, 0xc8, 0x1b, 0xe8, 0xc7, 0x59, 0x22, 0x05, 0xa7, 0xb3, 0xf1, 0x54, 0xd5,
	0x99, 0x3a, 0x59, 0x12, 0x60, 0x82, 0x10, 0xd0, 0xaf, 0xa3, 0x8c, 0xda, 0x47, 0xb2, 0x82, 0x8c,
	0x91, 0xbb, 0x61, 0x2c, 0xb5, 0xfb, 0x35, 0x87, 0x31, 0xf6, 0xba, 0x63, 0x69, 0x95, 0x51, 0x5b,
	0xaf, 0x7b, 0xd5, 0x88, 0x9c, 0xc1, 0x28, 0xa0, 0x19, 0x13, 0xd4, 0xc1, 0x71, 0xed, 0x63, 0x99,
	0xec, 0x52, 0xe4, 0x0d, 0x40, 0x0d, 0x6f, 0x39, 0x2d, 0xed, 0x81, 0x14, 0x74, 0x98, 0x36, 0x7f,
	0x13, 0x71, 0x6e, 0x1b, 0xdd, 0x3c, 0x32, 0x64, 0x02, 0xe3, 0x1a, 0xa9, 0xfe, 0x43, 0xa9, 0xd8,
	0xe3, 0x3a, 0x35, 0x70, 0x6e, 0x73, 0xaf, 0x06, 0x4e, 0xff, 0x1a, 0x86, 0xab, 0x5c, 0xd0, 0xf2,
	0x53, 0x94, 0xda, 0x20, 0xb3, 0x0d, 0x26, 0x33, 0x30, 0x9f, 0xef, 0x39, 0xaf, 0x36, 0x78, 0x4f,
	0x23, 0x79, 0x4f, 0xa4, 0xb9, 0xa7, 0x0f, 0xf7, 0x3c, 0xac, 0x36, 0x4e, 0x96, 0x5c, 0xf5, 0x82,
	0x56, 0x46, 0x7e, 0x86, 0xd1, 0x73, 0xc1, 0x58, 0xaa, 0x5c, 0x63, 0xe9, 0x7a, 0xd5, 0xba, 0x30,
	0xd7, 0xf8, 0xba, 0x52, 0xf2, 0x1d, 0x18, 0xcf, 0xf7, 0x3c, 0x2a, 0x1f, 0xb8, 0x7d, 0x72, 0xa6,
	0xbd, 0x1d, 0xcd, 0xac, 0x6e, 0xaf, 0x79, 0xf9, 0xc0, 0xaf, 0xb4, 0x60, 0x27, 0x91, 0xb3, 0xa1,
	0x59, 0xea, 0x4f, 0xa5, 0x9e, 0xec, 0x77, 0x51, 0x8e, 0x56, 0xb6, 0x18, 0x03, 0xd4, 0xbd, 0xd6,
	0x4f, 0x05, 0x5d, 0x00, 0x0c, 0x91, 0xc5, 0x78, 0xf2, 0xbf, 0x06, 0x86, 0x6a, 0x82, 0xdf, 0x2d,
	0x66, 0x59, 0x51, 0x52, 0xce, 0xb7, 0x2c, 0x57, 0x0b, 0xd4, 0xa5, 0x88, 0x0d, 0x46, 0xca, 0x1e,
	0x36, 0xdb, 0x88, 0xab, 0xe5, 0xd8, 0x41, 0xdc, 0x85, 0x98, 0x15, 0x5b, 0xca, 0xd5, 0x86, 0x28,
	0x84, 0x7b, 0xc3, 0x9f, 0xf2, 0x58, 0x6d, 0x88, 0x8c, 0xf1, 0xe6, 0x4b, 0x1a, 0x25, 0x2c, 0x4f,
	0x9f, 0xd4, 0x72, 0x34, 0x58, 0xea, 0xb7, 0xcf, 0x54, 0xed, 0x84, 0x8c, 0xb1, 0x76, 0x11, 0x95,
	0x34, 0x17, 0x6a, 0x13, 0x14, 0x42, 0x6d, 0x1e, 0x35, 0x5f, 0x5f, 0xc6, 0xb8, 0x19, 0x9f, 0x58,
	0xba, 0x49, 0x59, 0xfc, 0x28, 0xeb, 0xd4, 0xdf, 0x7d, 0x8f, 0x9b, 0xfc, 0x05, 0x66, 0x73, 0x4f,
	0x4d, 0x11, 0xad, 0x53, 0xe4, 0x6b, 0x30, 0xe3, 0x28, 0xfe, 0x48, 0xef, 0xb7, 0xe9, 0xee, 0x57,
	0xd0, 0x12, 0x38, 0x3e, 0xba, 0xf1, 0xfa, 0xd4, 0x61, 0x1b, 0x8c, 0xce, 0x64, 0xcb, 0x1f, 0x8b,
	0x48, 0x7c, 0xe4, 0xea, 0xcc, 0x2d, 0x71, 0xfe, 0x2d, 0xf4, 0x9d, 0x2c, 0x21, 0x43, 0xd0, 0x6f,
	0x7c, 0xdf, 0xb3, 0x7a, 0x04, 0x60, 0x70, 0xe7, 0x7b, 0xb7, 0xef, 0x5d, 0x4b, 0x23, 0x63, 0x18,
	0x86, 0xd7, 0xf3, 0x9b, 0xf0, 0xca, 0x5f, 0x5b, 0x47, 0xe7, 0xbf, 0x83, 0xd9, 0xec, 0x19, 0xa6,
	0x3e, 0x5c, 0x86, 0x7f, 0x78, 0xab, 0x70, 0x6d, 0xf5, 0xc8, 0x29, 0x00, 0x22, 0x27, 0x70, 0xe7,
	0x6b, 0x34, 0x7e, 0x01, 0x23, 0xc4, 0x4b, 0x37, 0x5c, 0x07, 0xfe, 0x6f, 0xd6, 0x11, 0xb1, 0x60,
	0x8c, 0x44, 0x53, 0xad, 0xbf, 0x63, 0x02, 0xdf, 0xf3, 0x16, 0x73, 0xe7, 0x57, 0x4b, 0x3f, 0xff,
	0x4f, 0x83, 0x51, 0x67, 0x25, 0xa5, 0x02, 0x87, 0xda, 0x95, 0xed, 0x91, 0x2f, 0xe1, 0xa4, 0x66,
	0x76, 0x85, 0x35, 0x72, 0x02, 0x66, 0x4d, 0xcd, 0x97, 0x4b, 0xd5, 0x47, 0xc2, 0xc0, 0x7d, 0xef,
	0xdf, 0xb9, 0x56, 0x9f, 0xbc, 0x02, 0xab, 0x66, 0xbc, 0xf9, 0xc2, 0xf5, 0x1c, 0xcf, 0x9d, 0x07,
	0x96, 0x2e, 0x07, 0xae, 0x59, 0x3c, 0xc0, 0x71, 0xeb, 0x5b, 0xf9, 0xe1, 0x7a, 0xbe, 0xb6, 0x06,
	0x2d, 0x83, 0xf8, 0x36, 0xb4, 0x8c, 0x96, 0xf1, 0xaf, 0xbd, 0xd5, 0xb5, 0x6b, 0x0d, 0xdb, 0x79,
	0xfc, 0xcb, 0x4b, 0x49, 0x99, 0xf2, 0xe4, 0xf5, 0xd0, 0xb2, 0x13, 0xcc, 0xfe, 0xd5, 0xe1, 0xb8,
	0x7e, 0x61, 0x7e, 0x02, 0x70, 0xff, 0xa6, 0x71, 0x25, 0xa8, 0x3c, 0x5d, 0xf3, 0x03, 0x51, 0x6f,
	0xe0, 0x6b, 0xd2, 0x7d, 0xf6, 0xea, 0xb7, 0x73, 0xd2, 0x23, 0x53, 0xd0, 0xbd, 0x2d, 0x17, 0x07,
	0xeb, 0x2f, 0x60, 0xe0, 0x94, 0x34, 0x12, 0xf4, 0x60, 0xc7, 0x8f, 0x60, 0x2c, 0x29, 0x17, 0x25,
	0x7b, 0x3a, 0xd8, 0x32, 0x83, 0x61, 0xc0, 0xd2, 0x74, 0x13, 0xc5, 0x8f, 0x07, 0x7b, 0xbe, 0x87,
	0xfe, 0x2f, 0x54, 0xbc, 0x44, 0x1e, 0xbe, 0x40, 0x3e, 0x05, 0x7d, 0x59, 0x65, 0xc5, 0xc1, 0xfa,
	0x1f, 0xe0, 0x38, 0x14, 0x91, 0xe0, 0x07, 0x1b, 0xde, 0x81, 0xb1, 0xf2, 0x5f, 0x64, 0xb9, 0xd0,
	0xc8, 0x05, 0xe8, 0x21, 0xcd, 0x93, 0xc3, 0x1d, 0x9b, 0x81, 0xfc, 0x27, 0x7d, 0xf7, 0x39, 0x00,
	0x00, 0xff, 0xff, 0xbf, 0xae, 0xc6, 0x3f, 0x58, 0x07, 0x00, 0x00,
}
